
docker build -t dissh33/itemmanagementserviceadmin .

docker build -f "F:\[DATA]\[PROGECTS]\KlondikeTR\ItemManagementService.Admin\Dockerfile" --force-rm -t dissh33/itemmanagementserviceadmin "F:\[DATA]\[PROGECTS]\KlondikeTR"
docker push dissh33/itemmanagementserviceadmin

docker run -dt 
	-v "C:\Users\Dis\vsdbg\vs2017u5:/remote_debugger:rw" 
	-v "C:\Users\Dis\AppData\Roaming\Microsoft\UserSecrets:/root/.microsoft/usersecrets:ro" 
	-v "C:\Users\Dis\AppData\Roaming\ASP.NET\Https:/root/.aspnet/https:ro" 
	-v "F:\[DATA]\[PROGECTS]\KlondikeTR\ItemManagementService.Admin:/app" 
	-v "F:\[DATA]\[PROGECTS]\KlondikeTR:/src/" 
	-v "C:\Users\Dis\.nuget\packages\:/root/.nuget/fallbackpackages" 
	-e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" 
	-e "ASPNETCORE_ENVIRONMENT=Development" 
	-e "ASPNETCORE_URLS=https://+:443;http://+:80" 
	-e "DOTNET_USE_POLLING_FILE_WATCHER=1" 
	-e "NUGET_PACKAGES=/root/.nuget/fallbackpackages" 
	-e "NUGET_FALLBACK_PACKAGES=/root/.nuget/fallbackpackages" 
	-P --name ItemManagementService.Admin 
	--entrypoint tail dissh33/itemmanagementserviceadmin -f /dev/null

docker run -dt -P --name ItemManagementService.Admin --entrypoint tail dissh33/itemmanagementserviceadmin -f /dev/null

docker run -e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" -e "ASPNETCORE_ENVIRONMENT=Development" -e "ASPNETCORE_URLS=https://+:443;http://+:80" -e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "NUGET_PACKAGES=/root/.nuget/fallbackpackages" -e "NUGET_FALLBACK_PACKAGES=/root/.nuget/fallbackpackages"  -dt -P --name ItemManagementService.Admin --entrypoint tail dissh33/itemmanagementserviceadmin -f /dev/null


##### ##### ##### ##### #####


kubectl delete deployment items-depl
kubectl apply -f items-depl.yaml

kubectl create secret generic postgres-secret --from-literal=POSTGRES_PASSWORD="admin"

kubectl create secret tls items-tls --cert=tls.crt --key=tls.key

#Nginx
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/aws/deploy.yaml 

#CertManager
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.yaml

#Elascticsearch
kubectl create -f https://download.elastic.co/downloads/eck/2.0.0/crds.yaml
kubectl apply -f https://download.elastic.co/downloads/eck/2.0.0/operator.yaml

kubectl get secret elastic-es-elastic-user -o=jsonpath='{.data.elastic}' | base64 --decode; echo

#host file
c:\windows\system32\drivers\etc\hosts

#Helm
https://github.com/helm/helm/releases

#Seq with Helm
helm repo add datalust https://helm.datalust.co
helm repo update

helm install my-seq datalust/seq

helm upgrade -f seq-config.yaml my-seq datalust/seq

#Monitoring
kubectl create namespace monitoring
kubectl get all -n monitoring

#Prometheus with Helm
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

helm install my-prometheus prometheus-community/prometheus -n monitoring

helm get values my-prometheus -n monitoring

helm upgrade -f prometheus-items-values.yaml my-prometheus prometheus-community/prometheus -n monitoring