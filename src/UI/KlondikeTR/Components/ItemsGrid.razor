@using KlondikeTR.Interfaces
@using Offers.Api.Dtos
@using KlondikeTR.Helpers

@implements IDisposable

@inject IItemsService ItemsService


<div class="container ms-0 d-flex flex-column border border-1 border-dark bg-dark">
    <p class="text-light fs-4 fw-light m-2 mb-0">Available Items</p>
    <hr class="bg-light m-1 mt-0"/>

    <div class="d-flex flex-row mt-3">
        @foreach (var item in _itemsList)
        {
            <div class="d-flex flex-column m-1">
                <img class="item-img border border-1 border-secondary" src="@item.Icon?.FileBinary.ToImageSrc()" alt="@item.Name?[..6]"/>
                <div class="item-name badge bg-secondary text-wrap text-break mt-1"><small>@item.Name</small></div>
            </div>
        }
    </div>
</div>

@code {
    private readonly CancellationTokenSource _cts = new();

    private IEnumerable<TradableItemDto> _itemsList = Enumerable.Empty<TradableItemDto>();

    protected override async Task OnInitializedAsync()
    {
        _itemsList = await ItemsService.GetAllAvailableItems(_cts.Token);
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}
